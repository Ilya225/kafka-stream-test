/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package message;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PSensorData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2068144688035695936L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PSensorData\",\"namespace\":\"message\",\"fields\":[{\"name\":\"measurement_time\",\"type\":\"long\"},{\"name\":\"device_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"latitude\",\"type\":[\"double\",\"null\"]},{\"name\":\"longitude\",\"type\":[\"double\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long measurement_time;
  @Deprecated public java.lang.String device_id;
  @Deprecated public java.lang.Double latitude;
  @Deprecated public java.lang.Double longitude;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PSensorData() {}

  /**
   * All-args constructor.
   * @param measurement_time The new value for measurement_time
   * @param device_id The new value for device_id
   * @param latitude The new value for latitude
   * @param longitude The new value for longitude
   */
  public PSensorData(java.lang.Long measurement_time, java.lang.String device_id, java.lang.Double latitude, java.lang.Double longitude) {
    this.measurement_time = measurement_time;
    this.device_id = device_id;
    this.latitude = latitude;
    this.longitude = longitude;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return measurement_time;
    case 1: return device_id;
    case 2: return latitude;
    case 3: return longitude;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: measurement_time = (java.lang.Long)value$; break;
    case 1: device_id = (java.lang.String)value$; break;
    case 2: latitude = (java.lang.Double)value$; break;
    case 3: longitude = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'measurement_time' field.
   * @return The value of the 'measurement_time' field.
   */
  public java.lang.Long getMeasurementTime() {
    return measurement_time;
  }

  /**
   * Sets the value of the 'measurement_time' field.
   * @param value the value to set.
   */
  public void setMeasurementTime(java.lang.Long value) {
    this.measurement_time = value;
  }

  /**
   * Gets the value of the 'device_id' field.
   * @return The value of the 'device_id' field.
   */
  public java.lang.String getDeviceId() {
    return device_id;
  }

  /**
   * Sets the value of the 'device_id' field.
   * @param value the value to set.
   */
  public void setDeviceId(java.lang.String value) {
    this.device_id = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return The value of the 'latitude' field.
   */
  public java.lang.Double getLatitude() {
    return latitude;
  }

  /**
   * Sets the value of the 'latitude' field.
   * @param value the value to set.
   */
  public void setLatitude(java.lang.Double value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return The value of the 'longitude' field.
   */
  public java.lang.Double getLongitude() {
    return longitude;
  }

  /**
   * Sets the value of the 'longitude' field.
   * @param value the value to set.
   */
  public void setLongitude(java.lang.Double value) {
    this.longitude = value;
  }

  /**
   * Creates a new PSensorData RecordBuilder.
   * @return A new PSensorData RecordBuilder
   */
  public static message.PSensorData.Builder newBuilder() {
    return new message.PSensorData.Builder();
  }

  /**
   * Creates a new PSensorData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PSensorData RecordBuilder
   */
  public static message.PSensorData.Builder newBuilder(message.PSensorData.Builder other) {
    return new message.PSensorData.Builder(other);
  }

  /**
   * Creates a new PSensorData RecordBuilder by copying an existing PSensorData instance.
   * @param other The existing instance to copy.
   * @return A new PSensorData RecordBuilder
   */
  public static message.PSensorData.Builder newBuilder(message.PSensorData other) {
    return new message.PSensorData.Builder(other);
  }

  /**
   * RecordBuilder for PSensorData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PSensorData>
    implements org.apache.avro.data.RecordBuilder<PSensorData> {

    private long measurement_time;
    private java.lang.String device_id;
    private java.lang.Double latitude;
    private java.lang.Double longitude;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(message.PSensorData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.measurement_time)) {
        this.measurement_time = data().deepCopy(fields()[0].schema(), other.measurement_time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.device_id)) {
        this.device_id = data().deepCopy(fields()[1].schema(), other.device_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.latitude)) {
        this.latitude = data().deepCopy(fields()[2].schema(), other.latitude);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.longitude)) {
        this.longitude = data().deepCopy(fields()[3].schema(), other.longitude);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PSensorData instance
     * @param other The existing instance to copy.
     */
    private Builder(message.PSensorData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.measurement_time)) {
        this.measurement_time = data().deepCopy(fields()[0].schema(), other.measurement_time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.device_id)) {
        this.device_id = data().deepCopy(fields()[1].schema(), other.device_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.latitude)) {
        this.latitude = data().deepCopy(fields()[2].schema(), other.latitude);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.longitude)) {
        this.longitude = data().deepCopy(fields()[3].schema(), other.longitude);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'measurement_time' field.
      * @return The value.
      */
    public java.lang.Long getMeasurementTime() {
      return measurement_time;
    }

    /**
      * Sets the value of the 'measurement_time' field.
      * @param value The value of 'measurement_time'.
      * @return This builder.
      */
    public message.PSensorData.Builder setMeasurementTime(long value) {
      validate(fields()[0], value);
      this.measurement_time = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'measurement_time' field has been set.
      * @return True if the 'measurement_time' field has been set, false otherwise.
      */
    public boolean hasMeasurementTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'measurement_time' field.
      * @return This builder.
      */
    public message.PSensorData.Builder clearMeasurementTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'device_id' field.
      * @return The value.
      */
    public java.lang.String getDeviceId() {
      return device_id;
    }

    /**
      * Sets the value of the 'device_id' field.
      * @param value The value of 'device_id'.
      * @return This builder.
      */
    public message.PSensorData.Builder setDeviceId(java.lang.String value) {
      validate(fields()[1], value);
      this.device_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'device_id' field has been set.
      * @return True if the 'device_id' field has been set, false otherwise.
      */
    public boolean hasDeviceId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'device_id' field.
      * @return This builder.
      */
    public message.PSensorData.Builder clearDeviceId() {
      device_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * @return The value.
      */
    public java.lang.Double getLatitude() {
      return latitude;
    }

    /**
      * Sets the value of the 'latitude' field.
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public message.PSensorData.Builder setLatitude(java.lang.Double value) {
      validate(fields()[2], value);
      this.latitude = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'latitude' field.
      * @return This builder.
      */
    public message.PSensorData.Builder clearLatitude() {
      latitude = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * @return The value.
      */
    public java.lang.Double getLongitude() {
      return longitude;
    }

    /**
      * Sets the value of the 'longitude' field.
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public message.PSensorData.Builder setLongitude(java.lang.Double value) {
      validate(fields()[3], value);
      this.longitude = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'longitude' field.
      * @return This builder.
      */
    public message.PSensorData.Builder clearLongitude() {
      longitude = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public PSensorData build() {
      try {
        PSensorData record = new PSensorData();
        record.measurement_time = fieldSetFlags()[0] ? this.measurement_time : (java.lang.Long) defaultValue(fields()[0]);
        record.device_id = fieldSetFlags()[1] ? this.device_id : (java.lang.String) defaultValue(fields()[1]);
        record.latitude = fieldSetFlags()[2] ? this.latitude : (java.lang.Double) defaultValue(fields()[2]);
        record.longitude = fieldSetFlags()[3] ? this.longitude : (java.lang.Double) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
